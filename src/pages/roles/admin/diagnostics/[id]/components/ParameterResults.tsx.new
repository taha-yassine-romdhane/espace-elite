import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/Card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { ClipboardList, Save, CheckCircle, Clock, Settings } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/components/ui/use-toast";
import { useRouter } from "next/router";

interface ParameterResultsProps {
  parameterValues: any[];
  status: string;
  diagnosticId: string;
}

export function ParameterResults({ parameterValues, status, diagnosticId }: ParameterResultsProps) {
  const [paramValues, setParamValues] = useState<Record<string, string>>({});
  const [isEditing, setIsEditing] = useState(false);
  const queryClient = useQueryClient();
  const router = useRouter();

  // Initialize parameter values from existing data
  React.useEffect(() => {
    const initialValues: Record<string, string> = {};
    if (parameterValues && parameterValues.length > 0) {
      parameterValues.forEach(paramValue => {
        initialValues[paramValue.parameterId || paramValue.parameter?.id] = paramValue.value || '';
      });
      setParamValues(initialValues);
    }
  }, [parameterValues]);
  
  // Mutation for saving parameter values
  const saveParametersMutation = useMutation({
    mutationFn: async (data: any) => {
      const response = await fetch(`/api/diagnostics/${diagnosticId}/parameters`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save parameters');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['diagnostic', diagnosticId] });
      setIsEditing(false);
      toast({
        title: "Paramètres enregistrés",
        description: "Les valeurs des paramètres ont été mises à jour avec succès.",
        variant: "default",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Erreur",
        description: error.message || "Une erreur s'est produite lors de l'enregistrement des paramètres.",
        variant: "destructive",
      });
    },
  });

  // Handle parameter value change
  const handleParamChange = (paramId: string, value: string) => {
    setParamValues(prev => ({
      ...prev,
      [paramId]: value,
    }));
  };

  // Handle save parameters
  const handleSaveParameters = () => {
    const parameterData = Object.entries(paramValues).map(([paramId, value]) => ({
      parameterId: paramId,
      value,
    }));
    
    saveParametersMutation.mutate({ parameters: parameterData });
  };

  // Group parameters by type
  const configParams = parameterValues?.filter(p => 
    p.parameter?.parameterType === 'PARAMETER' || 
    (!p.parameter?.parameterType && !p.resultRequired)
  ) || [];
  
  const resultParams = parameterValues?.filter(p => 
    p.parameter?.parameterType === 'RESULT' || 
    p.resultRequired
  ) || [];

  // Check if there are any parameters that need results
  const hasResultsToFill = resultParams.some(p => !p.value || p.value === '');

  if (!parameterValues || parameterValues.length === 0) {
    return (
      <Card>
        <CardHeader className="bg-gray-50 border-b border-gray-100">
          <CardTitle className="text-lg flex items-center gap-2">
            <ClipboardList className="h-5 w-5 text-blue-600" />
            Paramètres et Résultats
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <div className="text-gray-500 italic">Aucun paramètre disponible pour cet appareil</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader className="bg-gray-50 border-b border-gray-100">
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
          <CardTitle className="text-lg flex items-center gap-2">
            <ClipboardList className="h-5 w-5 text-blue-600" />
            Paramètres et Résultats
          </CardTitle>
          <div className="flex items-center gap-2">
            {isEditing ? (
              <>
                <Button
                  variant="outline"
                  onClick={() => setIsEditing(false)}
                  disabled={saveParametersMutation.isPending}
                >
                  Annuler
                </Button>
                <Button
                  onClick={handleSaveParameters}
                  disabled={saveParametersMutation.isPending}
                  className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
                >
                  {saveParametersMutation.isPending ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ) : (
                    <Save className="h-4 w-4" />
                  )}
                  Enregistrer
                </Button>
              </>
            ) : (
              <Button
                onClick={() => setIsEditing(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                Modifier
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="p-6">
        {/* Configuration Parameters Section */}
        {configParams.length > 0 && (
          <div className="mb-8">
            <h3 className="text-lg font-medium mb-4 text-gray-700 flex items-center gap-2">
              <Settings className="h-5 w-5 text-gray-600" />
              Paramètres de Configuration
            </h3>
            <div className="space-y-4">
              {configParams.map((paramValue, index) => {
                const param = paramValue.parameter || {};
                return (
                  <div 
                    key={`config-${index}`}
                    className="border rounded-md p-4 border-gray-200"
                  >
                    <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-start gap-2">
                          <div>
                            <h3 className="font-medium text-gray-900">{param.title}</h3>
                            
                            {/* Unit information */}
                            {param.unit && (
                              <div className="text-xs text-gray-500 mt-1">
                                Unité: {param.unit}
                              </div>
                            )}
                            
                            {/* Normal range information */}
                            {(param.minValue !== undefined || param.maxValue !== undefined) && (
                              <div className="text-xs text-gray-500 mt-1">
                                Plage normale: 
                                {param.minValue !== undefined ? ` ${param.minValue}` : ' -'} 
                                {param.maxValue !== undefined ? ` à ${param.maxValue}` : ' et plus'}
                                {param.unit ? ` ${param.unit}` : ''}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="w-full md:w-64">
                        {isEditing ? (
                          param.type === 'TEXT' ? (
                            <Textarea
                              value={paramValues[paramValue.parameterId || param.id] || ''}
                              onChange={(e) => handleParamChange(paramValue.parameterId || param.id, e.target.value)}
                              placeholder="Entrez la valeur..."
                              className="w-full"
                            />
                          ) : (
                            <Input
                              type={param.type === 'NUMBER' ? 'number' : 'text'}
                              value={paramValues[paramValue.parameterId || param.id] || ''}
                              onChange={(e) => handleParamChange(paramValue.parameterId || param.id, e.target.value)}
                              placeholder="Entrez la valeur..."
                              className="w-full"
                            />
                          )
                        ) : (
                          <div className="border rounded-md p-3 min-h-[40px] bg-gray-50 border-gray-200">
                            {paramValue.value ? (
                              <div className="flex items-center gap-1">
                                <span>
                                  {paramValue.value} {param.unit}
                                </span>
                              </div>
                            ) : (
                              <div className="text-gray-500 italic text-sm">Valeur non renseignée</div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Results Parameters Section */}
        {resultParams.length > 0 && (
          <div>
            <h3 className="text-lg font-medium mb-4 text-blue-700 flex items-center gap-2">
              <Clock className="h-5 w-5 text-blue-600" />
              Résultats à Collecter
              {hasResultsToFill && (
                <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-200 ml-2">
                  Résultats en attente
                </Badge>
              )}
            </h3>
            <div className="space-y-4">
              {resultParams.map((paramValue, index) => {
                const param = paramValue.parameter || {};
                const isDue = paramValue.resultDueDate && new Date(paramValue.resultDueDate) < new Date();
                const dueDate = paramValue.resultDueDate ? new Date(paramValue.resultDueDate) : null;
                
                return (
                  <div 
                    key={`result-${index}`}
                    className={`border rounded-md p-4 ${!paramValue.value ? 'border-blue-200 bg-blue-50/30' : 'border-green-200 bg-green-50/30'}`}
                  >
                    <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                      <div className="flex-1">
                        <div className="flex items-start gap-2">
                          <div>
                            <h3 className="font-medium text-gray-900">{param.title}</h3>
                            <div className="flex items-center gap-2 mt-1">
                              {!paramValue.value ? (
                                <Badge variant="outline" className="bg-blue-100 text-blue-800 border-blue-200 text-xs flex items-center gap-1">
                                  <Clock className="h-3 w-3" />
                                  Résultat à renseigner
                                </Badge>
                              ) : (
                                <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200 text-xs flex items-center gap-1">
                                  <CheckCircle className="h-3 w-3" />
                                  Résultat renseigné
                                </Badge>
                              )}
                              
                              {dueDate && (
                                <Badge variant="outline" className={`${isDue ? 'bg-red-100 text-red-800 border-red-200' : 'bg-gray-100 text-gray-800 border-gray-200'} text-xs`}>
                                  {isDue ? 'En retard' : 'À collecter'}: {dueDate.toLocaleDateString()}
                                </Badge>
                              )}
                            </div>
                            
                            {/* Unit information */}
                            {param.unit && (
                              <div className="text-xs text-gray-500 mt-1">
                                Unité: {param.unit}
                              </div>
                            )}
                            
                            {/* Normal range information */}
                            {(param.minValue !== undefined || param.maxValue !== undefined) && (
                              <div className="text-xs text-gray-500 mt-1">
                                Plage normale: 
                                {param.minValue !== undefined ? ` ${param.minValue}` : ' -'} 
                                {param.maxValue !== undefined ? ` à ${param.maxValue}` : ' et plus'}
                                {param.unit ? ` ${param.unit}` : ''}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="w-full md:w-64">
                        {isEditing ? (
                          param.type === 'TEXT' ? (
                            <Textarea
                              value={paramValues[paramValue.parameterId || param.id] || ''}
                              onChange={(e) => handleParamChange(paramValue.parameterId || param.id, e.target.value)}
                              placeholder="Entrez le résultat..."
                              className="w-full"
                            />
                          ) : (
                            <Input
                              type={param.type === 'NUMBER' ? 'number' : 'text'}
                              value={paramValues[paramValue.parameterId || param.id] || ''}
                              onChange={(e) => handleParamChange(paramValue.parameterId || param.id, e.target.value)}
                              placeholder="Entrez le résultat..."
                              className="w-full"
                            />
                          )
                        ) : (
                          <div className={`border rounded-md p-3 min-h-[40px] ${paramValue.value ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>
                            {paramValue.value ? (
                              <div className="flex items-center gap-1">
                                <CheckCircle className="h-4 w-4 text-green-600" />
                                <span className="font-medium">
                                  {paramValue.value} {param.unit}
                                </span>
                              </div>
                            ) : (
                              <div className="text-gray-500 italic text-sm">Résultat non renseigné</div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default ParameterResults;
