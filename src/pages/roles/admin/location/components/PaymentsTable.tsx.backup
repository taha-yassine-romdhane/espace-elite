import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Plus, Check, X, Trash2, Edit2 } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface Payment {
  id?: string;
  rentalId: string;
  amount: number;
  paymentDate: string;
  paymentMethod: string;
  status: string;
  rental?: {
    patient?: { firstName: string; lastName: string };
    device?: { name: string; deviceCode: string };
  };
}

export default function PaymentsTable() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [editingId, setEditingId] = useState<string | null>(null);
  const [newRow, setNewRow] = useState<Partial<Payment> | null>(null);
  const [editData, setEditData] = useState<Partial<Payment>>({});

  // Fetch payments
  const { data: paymentsData, isLoading } = useQuery({
    queryKey: ['payments'],
    queryFn: async () => {
      const response = await fetch('/api/payments');
      if (!response.ok) throw new Error('Failed to fetch payments');
      const data = await response.json();
      // Ensure we always return an array
      return Array.isArray(data) ? data : (data.payments || []);
    },
  });

  const payments = paymentsData || [];

  // Fetch rentals for dropdown
  const { data: rentalsData } = useQuery({
    queryKey: ['rentals-simple'],
    queryFn: async () => {
      const response = await fetch('/api/rentals/simple');
      if (!response.ok) throw new Error('Failed to fetch rentals');
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
  });

  const rentals = rentalsData || [];

  // Create payment mutation
  const createMutation = useMutation({
    mutationFn: async (payment: Partial<Payment>) => {
      const response = await fetch('/api/payments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payment),
      });
      if (!response.ok) throw new Error('Failed to create payment');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['payments'] });
      setNewRow(null);
      toast({ title: "Succès", description: "Paiement créé avec succès" });
    },
    onError: () => {
      toast({ title: "Erreur", description: "Échec de la création", variant: "destructive" });
    },
  });

  // Update payment mutation
  const updateMutation = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: Partial<Payment> }) => {
      const response = await fetch(`/api/payments/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to update payment');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['payments'] });
      setEditingId(null);
      setEditData({});
      toast({ title: "Succès", description: "Paiement mis à jour avec succès" });
    },
    onError: () => {
      toast({ title: "Erreur", description: "Échec de la mise à jour", variant: "destructive" });
    },
  });

  // Delete payment mutation
  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      const response = await fetch(`/api/payments/${id}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Failed to delete payment');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['payments'] });
      toast({ title: "Succès", description: "Paiement supprimé avec succès" });
    },
    onError: () => {
      toast({ title: "Erreur", description: "Échec de la suppression", variant: "destructive" });
    },
  });

  const handleAddNew = () => {
    setNewRow({
      rentalId: '',
      amount: 0,
      paymentDate: new Date().toISOString().split('T')[0],
      paymentMethod: 'CASH',
      status: 'PAID',
    });
  };

  const handleSaveNew = () => {
    if (newRow && newRow.rentalId && newRow.amount) {
      createMutation.mutate(newRow);
    } else {
      toast({ title: "Erreur", description: "Veuillez remplir tous les champs requis", variant: "destructive" });
    }
  };

  const handleEdit = (payment: Payment) => {
    setEditingId(payment.id!);
    setEditData(payment);
  };

  const handleSaveEdit = () => {
    if (editingId && editData) {
      updateMutation.mutate({ id: editingId, data: editData });
    }
  };

  const handleDelete = (id: string) => {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce paiement ?')) {
      deleteMutation.mutate(id);
    }
  };

  const renderCell = (
    value: any,
    field: keyof Payment,
    isEditing: boolean,
    onChange: (field: keyof Payment, value: any) => void
  ) => {
    if (!isEditing) {
      if (field === 'rental') {
        const patient = value?.patient;
        const device = value?.device;
        return patient ? `${patient.firstName} ${patient.lastName} - ${device?.deviceCode}` : '-';
      }
      if (field === 'amount') return `${value} DT`;
      if (field === 'paymentDate') return value ? new Date(value).toLocaleDateString('fr-FR') : '-';
      if (field === 'paymentMethod') {
        const methods: Record<string, string> = {
          CASH: 'Espèces',
          CHEQUE: 'Chèque',
          CNAM: 'CNAM',
        };
        return methods[value] || value;
      }
      if (field === 'status') {
        const statuses: Record<string, string> = {
          PAID: 'Payé',
          PENDING: 'En attente',
          PARTIAL: 'Partiel',
          GUARANTEE: 'Garantie',
        };
        return statuses[value] || value;
      }
      return value || '-';
    }

    switch (field) {
      case 'rentalId':
        return (
          <Select value={value || ''} onValueChange={(v) => onChange(field, v)}>
            <SelectTrigger className="h-8 border-blue-300 focus:ring-blue-500">
              <SelectValue placeholder="Sélectionner" />
            </SelectTrigger>
            <SelectContent>
              {rentals?.map((r: any) => (
                <SelectItem key={r.id} value={r.id}>
                  {r.patient?.firstName} {r.patient?.lastName} - {r.device?.deviceCode}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        );
      case 'paymentMethod':
        return (
          <Select value={value || 'CASH'} onValueChange={(v) => onChange(field, v)}>
            <SelectTrigger className="h-8 border-blue-300 focus:ring-blue-500">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="CASH">Espèces</SelectItem>
              <SelectItem value="CHEQUE">Chèque</SelectItem>
              <SelectItem value="CNAM">CNAM</SelectItem>
            </SelectContent>
          </Select>
        );
      case 'status':
        return (
          <Select value={value || 'PAID'} onValueChange={(v) => onChange(field, v)}>
            <SelectTrigger className="h-8 border-blue-300 focus:ring-blue-500">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="PAID">Payé</SelectItem>
              <SelectItem value="PENDING">En attente</SelectItem>
              <SelectItem value="PARTIAL">Partiel</SelectItem>
              <SelectItem value="GUARANTEE">Garantie</SelectItem>
            </SelectContent>
          </Select>
        );
      case 'amount':
        return (
          <Input
            type="number"
            value={value || 0}
            onChange={(e) => onChange(field, parseFloat(e.target.value))}
            className="h-8 border-blue-300 focus:ring-blue-500"
          />
        );
      case 'paymentDate':
        return (
          <Input
            type="date"
            value={value || ''}
            onChange={(e) => onChange(field, e.target.value)}
            className="h-8 border-blue-300 focus:ring-blue-500"
          />
        );
      default:
        return (
          <Input
            value={value || ''}
            onChange={(e) => onChange(field, e.target.value)}
            className="h-8 border-blue-300 focus:ring-blue-500"
          />
        );
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Paiements</h2>
        <Button onClick={handleAddNew} disabled={newRow !== null} className="bg-green-600 hover:bg-green-700">
          <Plus className="h-4 w-4 mr-2" />
          Nouveau Paiement
        </Button>
      </div>

      <div className="border rounded-lg overflow-hidden bg-white shadow-sm">
        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead className="bg-gray-50 border-b-2 border-gray-200">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase">Location</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase">Montant</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase">Date</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase">Méthode</th>
                <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase">Statut</th>
                <th className="px-4 py-3 text-center text-xs font-semibold text-gray-600 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody>
              {/* New row */}
              {newRow && (
                <tr className="border-b border-green-200 bg-green-50 hover:bg-green-100">
                  <td className="px-4 py-2">
                    {renderCell(newRow.rentalId, 'rentalId', true, (field, value) =>
                      setNewRow({ ...newRow, [field]: value })
                    )}
                  </td>
                  <td className="px-4 py-2">
                    {renderCell(newRow.amount, 'amount', true, (field, value) =>
                      setNewRow({ ...newRow, [field]: value })
                    )}
                  </td>
                  <td className="px-4 py-2">
                    {renderCell(newRow.paymentDate, 'paymentDate', true, (field, value) =>
                      setNewRow({ ...newRow, [field]: value })
                    )}
                  </td>
                  <td className="px-4 py-2">
                    {renderCell(newRow.paymentMethod, 'paymentMethod', true, (field, value) =>
                      setNewRow({ ...newRow, [field]: value })
                    )}
                  </td>
                  <td className="px-4 py-2">
                    {renderCell(newRow.status, 'status', true, (field, value) =>
                      setNewRow({ ...newRow, [field]: value })
                    )}
                  </td>
                  <td className="px-4 py-2">
                    <div className="flex gap-2 justify-center">
                      <Button size="sm" onClick={handleSaveNew} className="bg-green-600 hover:bg-green-700 h-7 px-2">
                        <Check className="h-3.5 w-3.5" />
                      </Button>
                      <Button size="sm" variant="destructive" onClick={() => setNewRow(null)} className="h-7 px-2">
                        <X className="h-3.5 w-3.5" />
                      </Button>
                    </div>
                  </td>
                </tr>
              )}

              {/* Existing rows */}
              {payments?.map((payment: Payment) => {
                const isEditing = editingId === payment.id;
                const currentData = isEditing ? editData : payment;

                return (
                  <tr
                    key={payment.id}
                    className={`border-b hover:bg-gray-50 ${isEditing ? 'bg-blue-50' : ''}`}
                  >
                    <td className="px-4 py-2">
                      {renderCell(isEditing ? currentData.rentalId : payment.rental, isEditing ? 'rentalId' : 'rental', isEditing, (field, value) =>
                        setEditData({ ...editData, [field]: value })
                      )}
                    </td>
                    <td className="px-4 py-2">
                      {renderCell(currentData.amount, 'amount', isEditing, (field, value) =>
                        setEditData({ ...editData, [field]: value })
                      )}
                    </td>
                    <td className="px-4 py-2">
                      {renderCell(currentData.paymentDate, 'paymentDate', isEditing, (field, value) =>
                        setEditData({ ...editData, [field]: value })
                      )}
                    </td>
                    <td className="px-4 py-2">
                      {renderCell(currentData.paymentMethod, 'paymentMethod', isEditing, (field, value) =>
                        setEditData({ ...editData, [field]: value })
                      )}
                    </td>
                    <td className="px-4 py-2">
                      {renderCell(currentData.status, 'status', isEditing, (field, value) =>
                        setEditData({ ...editData, [field]: value })
                      )}
                    </td>
                    <td className="px-4 py-2">
                      {isEditing ? (
                        <div className="flex gap-2 justify-center">
                          <Button size="sm" onClick={handleSaveEdit} className="bg-blue-600 hover:bg-blue-700 h-7 px-2">
                            <Check className="h-3.5 w-3.5" />
                          </Button>
                          <Button size="sm" variant="destructive" onClick={() => {setEditingId(null); setEditData({});}} className="h-7 px-2">
                            <X className="h-3.5 w-3.5" />
                          </Button>
                        </div>
                      ) : (
                        <div className="flex gap-2 justify-center">
                          <Button size="sm" variant="outline" onClick={() => handleEdit(payment)} className="h-7 px-2">
                            <Edit2 className="h-3.5 w-3.5" />
                          </Button>
                          <Button size="sm" variant="destructive" onClick={() => handleDelete(payment.id!)} className="h-7 px-2">
                            <Trash2 className="h-3.5 w-3.5" />
                          </Button>
                        </div>
                      )}
                    </td>
                  </tr>
                );
              })}

              {!isLoading && payments?.length === 0 && !newRow && (
                <tr>
                  <td colSpan={6} className="px-4 py-8 text-center text-gray-500">
                    Aucun paiement. Cliquez sur "Nouveau Paiement" pour commencer.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
